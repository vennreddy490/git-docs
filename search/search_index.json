{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"financialcalc/","text":"FinancialCalc This code is cool This module has simple functions: fye calculate_position ( stock_df , pos_type ) Given a stock's DataFrame and position type, calculate the positon's return as a float. Source code in financialcalc\\positions.py 11 12 13 14 15 16 17 18 19 20 21 22 def calculate_position ( stock_df : pd . DataFrame , pos_type : PositionType ) -> float : \"\"\"Given a stock's DataFrame and position type, calculate the positon's return as a float.\"\"\" first_day = stock_df [ \"Open\" ] . iloc [ 0 ] last_day = stock_df [ \"Close\" ] . iloc [ - 1 ] if pos_type == PositionType . LONG : return (( last_day - first_day ) / first_day ) * 100 if pos_type == PositionType . SHORT : return (( first_day - last_day ) / first_day ) * 100 return - 999.99 calculate_position_daily ( value , stock_df , pos_type ) Given a stock's DataFrame and position type, calculate the position's performance, in terms of position value every day, represented by a pd.Series indexed by date. Source code in financialcalc\\positions.py 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 def calculate_position_daily ( value : float , stock_df : pd . DataFrame , pos_type : PositionType ) -> pd . Series : \"\"\"Given a stock's DataFrame and position type, calculate the position's performance, in terms of position value every day, represented by a pd.Series indexed by date. \"\"\" position_value = pd . Series ( index = stock_df . index ) position_value . iloc [ 0 ] = value stock_original_price = stock_df [ \"Open\" ] . iloc [ 0 ] if pos_type == PositionType . LONG : for i in range ( 1 , len ( stock_df )): # Calculate the portfolio value each day, WITHOUT compounding. position_value . iloc [ i ] = value * ( stock_df [ \"Close\" ] . iloc [ i ] / stock_original_price ) if pos_type == PositionType . SHORT : for i in range ( 1 , len ( stock_df )): # Calculate the portfolio value each day, WITHOUT compounding. position_value . iloc [ i ] = value * ( stock_original_price / stock_df [ \"Close\" ] . iloc [ i ] ) return position_value","title":"FinancialCalc"},{"location":"financialcalc/#financialcalc","text":"This code is cool This module has simple functions: fye","title":"FinancialCalc"},{"location":"financialcalc/#financialcalc.positions.calculate_position","text":"Given a stock's DataFrame and position type, calculate the positon's return as a float. Source code in financialcalc\\positions.py 11 12 13 14 15 16 17 18 19 20 21 22 def calculate_position ( stock_df : pd . DataFrame , pos_type : PositionType ) -> float : \"\"\"Given a stock's DataFrame and position type, calculate the positon's return as a float.\"\"\" first_day = stock_df [ \"Open\" ] . iloc [ 0 ] last_day = stock_df [ \"Close\" ] . iloc [ - 1 ] if pos_type == PositionType . LONG : return (( last_day - first_day ) / first_day ) * 100 if pos_type == PositionType . SHORT : return (( first_day - last_day ) / first_day ) * 100 return - 999.99","title":"calculate_position"},{"location":"financialcalc/#financialcalc.positions.calculate_position_daily","text":"Given a stock's DataFrame and position type, calculate the position's performance, in terms of position value every day, represented by a pd.Series indexed by date. Source code in financialcalc\\positions.py 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 def calculate_position_daily ( value : float , stock_df : pd . DataFrame , pos_type : PositionType ) -> pd . Series : \"\"\"Given a stock's DataFrame and position type, calculate the position's performance, in terms of position value every day, represented by a pd.Series indexed by date. \"\"\" position_value = pd . Series ( index = stock_df . index ) position_value . iloc [ 0 ] = value stock_original_price = stock_df [ \"Open\" ] . iloc [ 0 ] if pos_type == PositionType . LONG : for i in range ( 1 , len ( stock_df )): # Calculate the portfolio value each day, WITHOUT compounding. position_value . iloc [ i ] = value * ( stock_df [ \"Close\" ] . iloc [ i ] / stock_original_price ) if pos_type == PositionType . SHORT : for i in range ( 1 , len ( stock_df )): # Calculate the portfolio value each day, WITHOUT compounding. position_value . iloc [ i ] = value * ( stock_original_price / stock_df [ \"Close\" ] . iloc [ i ] ) return position_value","title":"calculate_position_daily"}]}